"use strict";

// src/libs.ts
var hasOwnProperty = Object.prototype.hasOwnProperty;
var rsAstralRange = "\\ud800-\\udfff";
var rsComboMarksRange = "\\u0300-\\u036f";
var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
var rsComboSymbolsRange = "\\u20d0-\\u20ff";
var rsComboMarksExtendedRange = "\\u1ab0-\\u1aff";
var rsComboMarksSupplementRange = "\\u1dc0-\\u1dff";
var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange;
var rsVarRange = "\\ufe0e\\ufe0f";
var rsZWJ = "\\u200d";
var rsAstral = `[${rsAstralRange}]`;
var rsCombo = `[${rsComboRange}]`;
var rsFitz = "\\ud83c[\\udffb-\\udfff]";
var rsModifier = `(?:${rsCombo}|${rsFitz})`;
var rsNonAstral = `[^${rsAstralRange}]`;
var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
var reOptMod = `${rsModifier}?`;
var rsOptVar = `[${rsVarRange}]?`;
var rsOptJoin = `(?:${rsZWJ}(?:${[rsNonAstral, rsRegional, rsSurrPair].join(
  "|"
)})${rsOptVar + reOptMod})*`;
var rsSeq = rsOptVar + reOptMod + rsOptJoin;
var rsNonAstralCombo = `${rsNonAstral}${rsCombo}?`;
var rsSymbol = `(?:${[
  rsNonAstralCombo,
  rsCombo,
  rsRegional,
  rsSurrPair,
  rsAstral
].join("|")})`;
var reHasUnicode = RegExp(
  `[${rsZWJ + rsAstralRange + rsComboRange + rsVarRange}]`
);
var reUnicode = RegExp(`${rsFitz}(?=${rsFitz})|${rsSymbol + rsSeq}`, "g");
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
function stringToArray(str) {
  return hasUnicode(str) ? str.match(reUnicode) || [] : str.split("");
}
function has(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}
function trim(str, chars) {
  if (str && chars === void 0) {
    return str.trim();
  }
  if (!str || !chars) {
    return str || "";
  }
  const strSymbols = stringToArray(str);
  const chrSymbols = stringToArray(chars);
  let start = 0;
  let end = strSymbols.length - 1;
  while (chrSymbols.includes(str[start])) {
    start++;
  }
  while (chrSymbols.includes(str[end])) {
    end--;
  }
  return strSymbols.slice(start, end + 1).join("");
}

// src/env.ts
var utils = {
  /**
   * Get string from environment
   *
   * @param key string
   * @param defaultValue string
   * @returns string
   */
  string(key, defaultValue) {
    const rtnValue = has(process.env, key) ? process.env[key] : defaultValue;
    return rtnValue;
  },
  /**
   * Get integer from environment
   *
   * @param key string
   * @param defaultValue integer number
   * @returns integer number
   */
  int(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return parseInt(value, 10);
  },
  /**
   * Get float from environment
   *
   * @param key string
   * @param defaultValue float number
   * @returns float number
   */
  float(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return parseFloat(value);
  },
  /**
   * Get boolean from environment
   *
   * @param key string
   * @param defaultValue boolean
   * @returns boolean
   */
  bool(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key];
    return value === "true";
  },
  /**
   * Get JSON object from environment
   *
   * @param key string
   * @param defaultValue string
   * @returns object
   */
  json(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    try {
      return JSON.parse(value);
    } catch (error) {
      throw new Error(
        `Invalid json environment variable ${key}: ${error.message}`
      );
    }
  },
  /**
   * Get string array from environment
   *
   * @param key string
   * @param defaultValue string[]
   * @returns string[]
   */
  array(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    let value = process.env[key] || "";
    if (value.startsWith("[") && value.endsWith("]")) {
      value = value.substring(1, value.length - 1);
    }
    return value.split(",").map((v) => trim(trim(v, " "), '"'));
  },
  /**
   * Get Date object from environment
   *
   * @param key string
   * @param defaultValue Date
   * @returns Date
   */
  date(key, defaultValue) {
    if (!has(process.env, key)) {
      return defaultValue;
    }
    const value = process.env[key] || "";
    return new Date(value);
  }
};
function env(key, defaultValue) {
  return has(process.env, key) ? process.env[key] : defaultValue;
}
var env_default = Object.assign(env, utils);

// index.ts
module.exports = env_default;
