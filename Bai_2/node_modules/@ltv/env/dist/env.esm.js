var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// src/libs.ts
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
function stringToArray(str) {
  return hasUnicode(str) ? str.match(reUnicode) || [] : str.split("");
}
function has(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}
function trim(str, chars) {
  if (str && chars === void 0) {
    return str.trim();
  }
  if (!str || !chars) {
    return str || "";
  }
  const strSymbols = stringToArray(str);
  const chrSymbols = stringToArray(chars);
  let start = 0;
  let end = strSymbols.length - 1;
  while (chrSymbols.includes(str[start])) {
    start++;
  }
  while (chrSymbols.includes(str[end])) {
    end--;
  }
  return strSymbols.slice(start, end + 1).join("");
}
var hasOwnProperty, rsAstralRange, rsComboMarksRange, reComboHalfMarksRange, rsComboSymbolsRange, rsComboMarksExtendedRange, rsComboMarksSupplementRange, rsComboRange, rsVarRange, rsZWJ, rsAstral, rsCombo, rsFitz, rsModifier, rsNonAstral, rsRegional, rsSurrPair, reOptMod, rsOptVar, rsOptJoin, rsSeq, rsNonAstralCombo, rsSymbol, reHasUnicode, reUnicode;
var init_libs = __esm({
  "src/libs.ts"() {
    "use strict";
    hasOwnProperty = Object.prototype.hasOwnProperty;
    rsAstralRange = "\\ud800-\\udfff";
    rsComboMarksRange = "\\u0300-\\u036f";
    reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    rsComboSymbolsRange = "\\u20d0-\\u20ff";
    rsComboMarksExtendedRange = "\\u1ab0-\\u1aff";
    rsComboMarksSupplementRange = "\\u1dc0-\\u1dff";
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange;
    rsVarRange = "\\ufe0e\\ufe0f";
    rsZWJ = "\\u200d";
    rsAstral = `[${rsAstralRange}]`;
    rsCombo = `[${rsComboRange}]`;
    rsFitz = "\\ud83c[\\udffb-\\udfff]";
    rsModifier = `(?:${rsCombo}|${rsFitz})`;
    rsNonAstral = `[^${rsAstralRange}]`;
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    reOptMod = `${rsModifier}?`;
    rsOptVar = `[${rsVarRange}]?`;
    rsOptJoin = `(?:${rsZWJ}(?:${[rsNonAstral, rsRegional, rsSurrPair].join(
      "|"
    )})${rsOptVar + reOptMod})*`;
    rsSeq = rsOptVar + reOptMod + rsOptJoin;
    rsNonAstralCombo = `${rsNonAstral}${rsCombo}?`;
    rsSymbol = `(?:${[
      rsNonAstralCombo,
      rsCombo,
      rsRegional,
      rsSurrPair,
      rsAstral
    ].join("|")})`;
    reHasUnicode = RegExp(
      `[${rsZWJ + rsAstralRange + rsComboRange + rsVarRange}]`
    );
    reUnicode = RegExp(`${rsFitz}(?=${rsFitz})|${rsSymbol + rsSeq}`, "g");
  }
});

// src/env.ts
function env(key, defaultValue) {
  return has(process.env, key) ? process.env[key] : defaultValue;
}
var utils, env_default;
var init_env = __esm({
  "src/env.ts"() {
    "use strict";
    init_libs();
    utils = {
      /**
       * Get string from environment
       *
       * @param key string
       * @param defaultValue string
       * @returns string
       */
      string(key, defaultValue) {
        const rtnValue = has(process.env, key) ? process.env[key] : defaultValue;
        return rtnValue;
      },
      /**
       * Get integer from environment
       *
       * @param key string
       * @param defaultValue integer number
       * @returns integer number
       */
      int(key, defaultValue) {
        if (!has(process.env, key)) {
          return defaultValue;
        }
        const value = process.env[key] || "";
        return parseInt(value, 10);
      },
      /**
       * Get float from environment
       *
       * @param key string
       * @param defaultValue float number
       * @returns float number
       */
      float(key, defaultValue) {
        if (!has(process.env, key)) {
          return defaultValue;
        }
        const value = process.env[key] || "";
        return parseFloat(value);
      },
      /**
       * Get boolean from environment
       *
       * @param key string
       * @param defaultValue boolean
       * @returns boolean
       */
      bool(key, defaultValue) {
        if (!has(process.env, key)) {
          return defaultValue;
        }
        const value = process.env[key];
        return value === "true";
      },
      /**
       * Get JSON object from environment
       *
       * @param key string
       * @param defaultValue string
       * @returns object
       */
      json(key, defaultValue) {
        if (!has(process.env, key)) {
          return defaultValue;
        }
        const value = process.env[key] || "";
        try {
          return JSON.parse(value);
        } catch (error) {
          throw new Error(
            `Invalid json environment variable ${key}: ${error.message}`
          );
        }
      },
      /**
       * Get string array from environment
       *
       * @param key string
       * @param defaultValue string[]
       * @returns string[]
       */
      array(key, defaultValue) {
        if (!has(process.env, key)) {
          return defaultValue;
        }
        let value = process.env[key] || "";
        if (value.startsWith("[") && value.endsWith("]")) {
          value = value.substring(1, value.length - 1);
        }
        return value.split(",").map((v) => trim(trim(v, " "), '"'));
      },
      /**
       * Get Date object from environment
       *
       * @param key string
       * @param defaultValue Date
       * @returns Date
       */
      date(key, defaultValue) {
        if (!has(process.env, key)) {
          return defaultValue;
        }
        const value = process.env[key] || "";
        return new Date(value);
      }
    };
    env_default = Object.assign(env, utils);
  }
});

// index.ts
var require_env = __commonJS({
  "index.ts"(exports, module) {
    init_env();
    module.exports = env_default;
  }
});
export default require_env();
